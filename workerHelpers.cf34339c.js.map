{"mappings":"A,C,I,C,S,C,C,C,C,C,C,C,C,C,C,C,M,C,c,C,C,C,C,C,C,G,C,C,C,G,C,C,C,U,C,C,C,C,Y,C,C,C,C,C,C,A,I,C,A,C,C,C,A,W,E,O,U,A,C,U,C,A,W,E,O,I,A,C,I,C,A,W,E,O,M,A,C,M,C,A,W,E,O,M,A,C,M,C,E,C,C,C,E,C,C,C,E,C,C,C,C,C,iB,A,A,AQoBA,UAAS,CAAc,CAAC,CAAM,CAAE,CAAI,CAAE,CACpC,OAAO,IAAI,OAAO,CAAC,AAAA,CAAO,EAAI,CAC5B,CAAM,CAAC,gBAAgB,CAAC,SAAS,CAAE,SAAS,CAAK,CAAC,CAtBtD,IAAA,CAsBwD,CAAI,CAAE,CAAE,CACtD,AAAQ,IAAI,EAAZ,CAAI,EAAY,CAAI,CAAC,IAAI,GAAK,CAAI,GACtC,CAAM,CAAC,mBAAmB,CAAC,SAAS,CAAE,CAAK,CAAC,CAC5C,CAAO,CAAC,CAAI,CAAC,CAFyB,CAGvC,CAAC,CACH,CAAC,AAAC,CACJ,A,A,I,E,C,G,A,C,C,C,S,C,C,C,G,C,I,C,C,O,C,C,C,C,C,O,A,A,A,I,C,I,C,C,C,I,C,C,C,C,C,C,A,A,Q,C,C,C,C,A,K,C,C,C,E,C,C,C,O,C,E,C,A,A,Q,C,C,C,C,C,C,C,C,C,I,C,C,C,O,C,C,C,C,C,O,C,C,C,C,O,A,C,A,I,C,C,I,K,C,sB,C,C,C,G,C,A,A,O,C,C,I,C,kB,C,C,A,C,C,C,Q,C,S,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,iB,A,C,C,C,C,C,C,Q,C,O,C,S,C,C,C,C,CP5BD,CAAA,CAAA,OAAc,CAAI,AAAA,CAAA,CAAA,OAAA,CAAA,CAAsC,AAAA,CAAA,CAAA,OAAA,CAAA,CAAA,YAA4C,CAAC,OAAO,CAAC,CAAG,AAAA,CAAA,CAAA,OAAA,CAAA,CAAA,OAA4C,CAAC,OAAO,CAAC,CAAC,CAAE,IAAI,CAAC,IAAM,CAAa,CAAC,OAAO,CAAC,CAAC,C,C,C,C,C,Q,C,O,C,S,C,C,C,C,CCA1M,YAAY,A,K,C,C,C,C,O,C,A,AAKZ,CAAA,CAAA,CAAA,OAAc,CAAG,CAAW,CAAC,SAAU,CAAM,CAAE,CAC7C,OAAO,IAAI,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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/runtime-1ac09e95a3d81d01.js","node_modules/@parcel/runtime-js/lib/helpers/worker/js-loader.js","node_modules/@parcel/runtime-js/lib/helpers/cacheLoader.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-0125c3655e723aa3.js","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","packages/wasm_sum/snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js"],"sourcesContent":["(() => {\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire2398\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire2398\"] = parcelRequire;\n}\nparcelRequire.register(\"jdbBp\", function(module, exports) {\n\n\n\nmodule.exports = (parcelRequire(\"qQeMH\"))((parcelRequire(\"8IoA4\")).getBundleURL('8ExQG') + (parcelRequire(\"bGWGM\")).resolve(\"hj8eV\")).then(()=>parcelRequire('8ILa9')\n);\n\n});\nparcelRequire.register(\"qQeMH\", function(module, exports) {\n\"use strict\";\n\nvar $90gdW = parcelRequire(\"90gdW\");\nmodule.exports = $90gdW(function(bundle) {\n    return new Promise(function(resolve, reject) {\n        try {\n            importScripts(bundle);\n            resolve();\n        } catch (e) {\n            reject(e);\n        }\n    });\n});\n\n});\nparcelRequire.register(\"90gdW\", function(module, exports) {\n\"use strict\";\nvar $68e0b2e0ca9293f2$var$cachedBundles = {};\nvar $68e0b2e0ca9293f2$var$cachedPreloads = {};\nvar $68e0b2e0ca9293f2$var$cachedPrefetches = {};\nfunction $68e0b2e0ca9293f2$var$getCache(type) {\n    switch(type){\n        case 'preload':\n            return $68e0b2e0ca9293f2$var$cachedPreloads;\n        case 'prefetch':\n            return $68e0b2e0ca9293f2$var$cachedPrefetches;\n        default:\n            return $68e0b2e0ca9293f2$var$cachedBundles;\n    }\n}\nmodule.exports = function(loader, type) {\n    return function(bundle) {\n        var cache = $68e0b2e0ca9293f2$var$getCache(type);\n        if (cache[bundle]) return cache[bundle];\n        return cache[bundle] = loader.apply(null, arguments).catch(function(e) {\n            delete cache[bundle];\n            throw e;\n        });\n    };\n};\n\n});\n\n\nparcelRequire.register(\"8IoA4\", function(module, exports) {\n\n$parcel$export(module.exports, \"getBundleURL\", () => $01a32f7bf710fe19$export$bdfd709ae4826697, (v) => $01a32f7bf710fe19$export$bdfd709ae4826697 = v);\n$parcel$export(module.exports, \"getOrigin\", () => $01a32f7bf710fe19$export$5a759dc7a1cfb72a, (v) => $01a32f7bf710fe19$export$5a759dc7a1cfb72a = v);\nvar $01a32f7bf710fe19$export$bdfd709ae4826697;\nvar $01a32f7bf710fe19$export$c9e73fbda7da57b6;\nvar $01a32f7bf710fe19$export$5a759dc7a1cfb72a;\n\"use strict\";\nvar $01a32f7bf710fe19$var$bundleURL = {};\nfunction $01a32f7bf710fe19$var$getBundleURLCached(id) {\n    var value = $01a32f7bf710fe19$var$bundleURL[id];\n    if (!value) {\n        value = $01a32f7bf710fe19$var$getBundleURL();\n        $01a32f7bf710fe19$var$bundleURL[id] = value;\n    }\n    return value;\n}\nfunction $01a32f7bf710fe19$var$getBundleURL() {\n    try {\n        throw new Error();\n    } catch (err) {\n        var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz)-extension):\\/\\/[^)\\n]+/g);\n        if (matches) // The first two stack frames will be this function and getBundleURLCached.\n        // Use the 3rd one, which will be a runtime in the original bundle.\n        return $01a32f7bf710fe19$var$getBaseURL(matches[2]);\n    }\n    return '/';\n}\nfunction $01a32f7bf710fe19$var$getBaseURL(url) {\n    return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction $01a32f7bf710fe19$var$getOrigin(url) {\n    var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz)-extension):\\/\\/[^/]+/);\n    if (!matches) throw new Error('Origin not found');\n    return matches[0];\n}\n$01a32f7bf710fe19$export$bdfd709ae4826697 = $01a32f7bf710fe19$var$getBundleURLCached;\n$01a32f7bf710fe19$export$c9e73fbda7da57b6 = $01a32f7bf710fe19$var$getBaseURL;\n$01a32f7bf710fe19$export$5a759dc7a1cfb72a = $01a32f7bf710fe19$var$getOrigin;\n\n});\n\nparcelRequire.register(\"bGWGM\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $8831245f07480bee$export$6503ec6e8aabbaf, (v) => $8831245f07480bee$export$6503ec6e8aabbaf = v);\n$parcel$export(module.exports, \"resolve\", () => $8831245f07480bee$export$f7ad0328861e2f03, (v) => $8831245f07480bee$export$f7ad0328861e2f03 = v);\nvar $8831245f07480bee$export$6503ec6e8aabbaf;\nvar $8831245f07480bee$export$f7ad0328861e2f03;\n\"use strict\";\nvar $8831245f07480bee$var$mapping = {};\nfunction $8831245f07480bee$var$register(pairs) {\n    var keys = Object.keys(pairs);\n    for(var i = 0; i < keys.length; i++)$8831245f07480bee$var$mapping[keys[i]] = pairs[keys[i]];\n}\nfunction $8831245f07480bee$var$resolve(id) {\n    var resolved = $8831245f07480bee$var$mapping[id];\n    if (resolved == null) throw new Error('Could not resolve bundle with id ' + id);\n    return resolved;\n}\n$8831245f07480bee$export$6503ec6e8aabbaf = $8831245f07480bee$var$register;\n$8831245f07480bee$export$f7ad0328861e2f03 = $8831245f07480bee$var$resolve;\n\n});\n\n\nparcelRequire.register(\"6bE7y\", function(module, exports) {\n\nvar $7YDMF = parcelRequire(\"7YDMF\");\n\nvar $8IoA4 = parcelRequire(\"8IoA4\");\n\nlet $4812e44def16bd04$var$url = $8IoA4.getBundleURL('8ExQG') + (parcelRequire(\"bGWGM\")).resolve(\"8ExQG\");\nmodule.exports = $7YDMF($4812e44def16bd04$var$url, $8IoA4.getOrigin($4812e44def16bd04$var$url), false);\n\n});\nparcelRequire.register(\"7YDMF\", function(module, exports) {\n\"use strict\";\nmodule.exports = function(workerUrl, origin, isESM) {\n    if (origin === self.location.origin) // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n    else {\n        // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n        var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n        return URL.createObjectURL(new Blob([\n            source\n        ], {\n            type: 'application/javascript'\n        }));\n    }\n};\n\n});\n\n\nvar $de8880ecb86e007f$exports = {};\n\n$parcel$export($de8880ecb86e007f$exports, \"startWorkers\", () => $de8880ecb86e007f$export$6a13f9f53ddacde8);\n/**\n * Copyright 2021 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ // Note: we use `wasm_bindgen_worker_`-prefixed message types to make sure\n// we can handle bundling into other files, which might happen to have their\n// own `postMessage`/`onmessage` communication channels.\n//\n// If we didn't take that into the account, we could send much simpler signals\n// like just `0` or whatever, but the code would be less resilient.\nfunction $de8880ecb86e007f$var$waitForMsgType(target, type) {\n    return new Promise((resolve)=>{\n        target.addEventListener('message', function onMsg({ data: data  }) {\n            if (data == null || data.type !== type) return;\n            target.removeEventListener('message', onMsg);\n            resolve(data);\n        });\n    });\n}\n\n$de8880ecb86e007f$var$waitForMsgType(self, 'wasm_bindgen_worker_init').then(async (data)=>{\n    // # Note 1\n    // Our JS should have been generated in\n    // `[out-dir]/snippets/wasm-bindgen-rayon-[hash]/workerHelpers.js`,\n    // resolve the main module via `../../..`.\n    //\n    // This might need updating if the generated structure changes on wasm-bindgen\n    // side ever in the future, but works well with bundlers today. The whole\n    // point of this crate, after all, is to abstract away unstable features\n    // and temporary bugs so that you don't need to deal with them in your code.\n    //\n    // # Note 2\n    // This could be a regular import, but then some bundlers complain about\n    // circular deps.\n    //\n    // Dynamic import could be cheap if this file was inlined into the parent,\n    // which would require us just using `../../..` in `new Worker` below,\n    // but that doesn't work because wasm-pack unconditionally adds\n    // \"sideEffects\":false (see below).\n    //\n    // OTOH, even though it can't be inlined, it should be still reasonably\n    // cheap since the requested file is already in cache (it was loaded by\n    // the main thread).\n    const pkg = await (parcelRequire(\"jdbBp\"));\n    await pkg.default(data.module, data.memory);\n    postMessage({\n        type: 'wasm_bindgen_worker_ready'\n    });\n    pkg.wbg_rayon_start_worker(data.receiver);\n});\n// Note: this is never used, but necessary to prevent a bug in Firefox\n// (https://bugzilla.mozilla.org/show_bug.cgi?id=1702191) where it collects\n// Web Workers that have a shared WebAssembly memory with the main thread,\n// but are not explicitly rooted via a `Worker` instance.\n//\n// By storing them in a variable, we can keep `Worker` objects around and\n// prevent them from getting GC-d.\nlet $de8880ecb86e007f$var$_workers;\n\nasync function $de8880ecb86e007f$export$6a13f9f53ddacde8(module, memory, builder) {\n    const workerInit = {\n        type: 'wasm_bindgen_worker_init',\n        module: module,\n        memory: memory,\n        receiver: builder.receiver()\n    };\n    $de8880ecb86e007f$var$_workers = await Promise.all(Array.from({\n        length: builder.numThreads()\n    }, async ()=>{\n        // Self-spawn into a new Worker.\n        //\n        // TODO: while `new URL('...', import.meta.url) becomes a semi-standard\n        // way to get asset URLs relative to the module across various bundlers\n        // and browser, ideally we should switch to `import.meta.resolve`\n        // once it becomes a standard.\n        //\n        // Note: we could use `../../..` as the URL here to inline workerHelpers.js\n        // into the parent entry instead of creating another split point -\n        // this would be preferable from optimization perspective -\n        // however, Webpack then eliminates all message handler code\n        // because wasm-pack produces \"sideEffects\":false in package.json\n        // unconditionally.\n        //\n        // The only way to work around that is to have side effect code\n        // in an entry point such as Worker file itself.\n        const worker = new Worker((parcelRequire(\"6bE7y\")));\n        worker.postMessage(workerInit);\n        await $de8880ecb86e007f$var$waitForMsgType(worker, 'wasm_bindgen_worker_ready');\n        return worker;\n    }));\n    builder.build();\n}\n\n})();\n//# sourceMappingURL=workerHelpers.cf34339c.js.map\n","module.exports = (require(\"./helpers/worker/js-loader\")(require('./helpers/bundle-url').getBundleURL('8ExQG') + require('./helpers/bundle-manifest').resolve(\"hj8eV\"))).then(() => parcelRequire('8ILa9'));","\"use strict\";\n\n/* global __parcel__importScripts__:readonly*/\nvar cacheLoader = require('../cacheLoader');\n\nmodule.exports = cacheLoader(function (bundle) {\n  return new Promise(function (resolve, reject) {\n    try {\n      __parcel__importScripts__(bundle);\n\n      resolve();\n    } catch (e) {\n      reject(e);\n    }\n  });\n});","\"use strict\";\n\nvar cachedBundles = {};\nvar cachedPreloads = {};\nvar cachedPrefetches = {};\n\nfunction getCache(type) {\n  switch (type) {\n    case 'preload':\n      return cachedPreloads;\n\n    case 'prefetch':\n      return cachedPrefetches;\n\n    default:\n      return cachedBundles;\n  }\n}\n\nmodule.exports = function (loader, type) {\n  return function (bundle) {\n    var cache = getCache(type);\n\n    if (cache[bundle]) {\n      return cache[bundle];\n    }\n\n    return cache[bundle] = loader.apply(null, arguments).catch(function (e) {\n      delete cache[bundle];\n      throw e;\n    });\n  };\n};","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz)-extension):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz)-extension):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","let workerURL = require('./helpers/get-worker-url');\nlet bundleURL = require('./helpers/bundle-url');\nlet url = bundleURL.getBundleURL('8ExQG') + require('./helpers/bundle-manifest').resolve(\"8ExQG\");module.exports = workerURL(url, bundleURL.getOrigin(url), false);","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","/**\n * Copyright 2021 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: we use `wasm_bindgen_worker_`-prefixed message types to make sure\n// we can handle bundling into other files, which might happen to have their\n// own `postMessage`/`onmessage` communication channels.\n//\n// If we didn't take that into the account, we could send much simpler signals\n// like just `0` or whatever, but the code would be less resilient.\n\nfunction waitForMsgType(target, type) {\n  return new Promise(resolve => {\n    target.addEventListener('message', function onMsg({ data }) {\n      if (data == null || data.type !== type) return;\n      target.removeEventListener('message', onMsg);\n      resolve(data);\n    });\n  });\n}\n\nwaitForMsgType(self, 'wasm_bindgen_worker_init').then(async data => {\n  // # Note 1\n  // Our JS should have been generated in\n  // `[out-dir]/snippets/wasm-bindgen-rayon-[hash]/workerHelpers.js`,\n  // resolve the main module via `../../..`.\n  //\n  // This might need updating if the generated structure changes on wasm-bindgen\n  // side ever in the future, but works well with bundlers today. The whole\n  // point of this crate, after all, is to abstract away unstable features\n  // and temporary bugs so that you don't need to deal with them in your code.\n  //\n  // # Note 2\n  // This could be a regular import, but then some bundlers complain about\n  // circular deps.\n  //\n  // Dynamic import could be cheap if this file was inlined into the parent,\n  // which would require us just using `../../..` in `new Worker` below,\n  // but that doesn't work because wasm-pack unconditionally adds\n  // \"sideEffects\":false (see below).\n  //\n  // OTOH, even though it can't be inlined, it should be still reasonably\n  // cheap since the requested file is already in cache (it was loaded by\n  // the main thread).\n  const pkg = await import('../../..');\n  await pkg.default(data.module, data.memory);\n  postMessage({ type: 'wasm_bindgen_worker_ready' });\n  pkg.wbg_rayon_start_worker(data.receiver);\n});\n\n// Note: this is never used, but necessary to prevent a bug in Firefox\n// (https://bugzilla.mozilla.org/show_bug.cgi?id=1702191) where it collects\n// Web Workers that have a shared WebAssembly memory with the main thread,\n// but are not explicitly rooted via a `Worker` instance.\n//\n// By storing them in a variable, we can keep `Worker` objects around and\n// prevent them from getting GC-d.\nlet _workers;\n\nexport async function startWorkers(module, memory, builder) {\n  const workerInit = {\n    type: 'wasm_bindgen_worker_init',\n    module,\n    memory,\n    receiver: builder.receiver()\n  };\n\n  _workers = await Promise.all(\n    Array.from({ length: builder.numThreads() }, async () => {\n      // Self-spawn into a new Worker.\n      //\n      // TODO: while `new URL('...', import.meta.url) becomes a semi-standard\n      // way to get asset URLs relative to the module across various bundlers\n      // and browser, ideally we should switch to `import.meta.resolve`\n      // once it becomes a standard.\n      //\n      // Note: we could use `../../..` as the URL here to inline workerHelpers.js\n      // into the parent entry instead of creating another split point -\n      // this would be preferable from optimization perspective -\n      // however, Webpack then eliminates all message handler code\n      // because wasm-pack produces \"sideEffects\":false in package.json\n      // unconditionally.\n      //\n      // The only way to work around that is to have side effect code\n      // in an entry point such as Worker file itself.\n      const worker = new Worker(new URL('./workerHelpers.js', import.meta.url), {\n        type: 'module'\n      });\n      worker.postMessage(workerInit);\n      await waitForMsgType(worker, 'wasm_bindgen_worker_ready');\n      return worker;\n    })\n  );\n  builder.build();\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$de8880ecb86e007f$exports","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","$de8880ecb86e007f$var$waitForMsgType","target","type","Promise","resolve","addEventListener","onMsg","data","removeEventListener","id","exports","init","module","call","err","Error","code","register","getBundleURL","then","$90gdW","bundle","reject","importScripts","$68e0b2e0ca9293f2$var$cachedBundles","$68e0b2e0ca9293f2$var$cachedPreloads","$68e0b2e0ca9293f2$var$cachedPrefetches","loader","cache","$68e0b2e0ca9293f2$var$getCache","apply","arguments","catch","$01a32f7bf710fe19$export$bdfd709ae4826697","$01a32f7bf710fe19$export$5a759dc7a1cfb72a","$01a32f7bf710fe19$var$bundleURL","value","$01a32f7bf710fe19$var$getBundleURL","url","matches","stack","match","replace","$8831245f07480bee$export$6503ec6e8aabbaf","$8831245f07480bee$export$f7ad0328861e2f03","$8831245f07480bee$var$mapping","pairs","keys","i","length","resolved","$7YDMF","$8IoA4","$4812e44def16bd04$var$url","getOrigin","workerUrl","origin","isESM","location","source","JSON","stringify","URL","createObjectURL","Blob","$de8880ecb86e007f$export$6a13f9f53ddacde8","pkg","default","memory","postMessage","wbg_rayon_start_worker","receiver","$de8880ecb86e007f$var$_workers","builder","workerInit","all","Array","from","numThreads","worker","Worker","build"],"version":3,"file":"workerHelpers.cf34339c.js.map"}